package com.satoripop.insurance.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContractAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAllPropertiesEquals(Contract expected, Contract actual) {
        assertContractAutoGeneratedPropertiesEquals(expected, actual);
        assertContractAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAllUpdatablePropertiesEquals(Contract expected, Contract actual) {
        assertContractUpdatableFieldsEquals(expected, actual);
        assertContractUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAutoGeneratedPropertiesEquals(Contract expected, Contract actual) {
        assertThat(actual)
            .as("Verify Contract auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractUpdatableFieldsEquals(Contract expected, Contract actual) {
        assertThat(actual)
            .as("Verify Contract relevant properties")
            .satisfies(a -> assertThat(a.getContractNumber()).as("check contractNumber").isEqualTo(expected.getContractNumber()))
            .satisfies(a -> assertThat(a.getDuration()).as("check duration").isEqualTo(expected.getDuration()))
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getNetPremium()).as("check netPremium").isEqualTo(expected.getNetPremium()))
            .satisfies(a -> assertThat(a.getUpfrontPremium()).as("check upfrontPremium").isEqualTo(expected.getUpfrontPremium()))
            .satisfies(a -> assertThat(a.getCost()).as("check cost").isEqualTo(expected.getCost()))
            .satisfies(a -> assertThat(a.getTaxes()).as("check taxes").isEqualTo(expected.getTaxes()))
            .satisfies(a -> assertThat(a.getfSSR()).as("check fSSR").isEqualTo(expected.getfSSR()))
            .satisfies(a -> assertThat(a.getfPAC()).as("check fPAC").isEqualTo(expected.getfPAC()))
            .satisfies(a -> assertThat(a.gettFGA()).as("check tFGA").isEqualTo(expected.gettFGA()))
            .satisfies(a -> assertThat(a.getContractType()).as("check contractType").isEqualTo(expected.getContractType()))
            .satisfies(a -> assertThat(a.getPaymentPlan()).as("check paymentPlan").isEqualTo(expected.getPaymentPlan()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractUpdatableRelationshipsEquals(Contract expected, Contract actual) {
        assertThat(actual)
            .as("Verify Contract relationships")
            .satisfies(a -> assertThat(a.getVehicle()).as("check vehicle").isEqualTo(expected.getVehicle()))
            .satisfies(a -> assertThat(a.getClient()).as("check client").isEqualTo(expected.getClient()))
            .satisfies(a -> assertThat(a.getAgency()).as("check agency").isEqualTo(expected.getAgency()));
    }
}
