package com.satoripop.insurance.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClientAddressAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAddressAllPropertiesEquals(ClientAddress expected, ClientAddress actual) {
        assertClientAddressAutoGeneratedPropertiesEquals(expected, actual);
        assertClientAddressAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAddressAllUpdatablePropertiesEquals(ClientAddress expected, ClientAddress actual) {
        assertClientAddressUpdatableFieldsEquals(expected, actual);
        assertClientAddressUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAddressAutoGeneratedPropertiesEquals(ClientAddress expected, ClientAddress actual) {
        assertThat(actual)
            .as("Verify ClientAddress auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAddressUpdatableFieldsEquals(ClientAddress expected, ClientAddress actual) {
        assertThat(actual)
            .as("Verify ClientAddress relevant properties")
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getRegion()).as("check region").isEqualTo(expected.getRegion()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAddressUpdatableRelationshipsEquals(ClientAddress expected, ClientAddress actual) {
        assertThat(actual)
            .as("Verify ClientAddress relationships")
            .satisfies(a -> assertThat(a.getCity()).as("check city").isEqualTo(expected.getCity()));
    }
}
