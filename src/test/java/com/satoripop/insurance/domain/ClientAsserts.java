package com.satoripop.insurance.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClientAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAllPropertiesEquals(Client expected, Client actual) {
        assertClientAutoGeneratedPropertiesEquals(expected, actual);
        assertClientAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAllUpdatablePropertiesEquals(Client expected, Client actual) {
        assertClientUpdatableFieldsEquals(expected, actual);
        assertClientUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAutoGeneratedPropertiesEquals(Client expected, Client actual) {
        assertThat(actual)
            .as("Verify Client auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientUpdatableFieldsEquals(Client expected, Client actual) {
        assertThat(actual)
            .as("Verify Client relevant properties")
            .satisfies(a -> assertThat(a.getLastName()).as("check lastName").isEqualTo(expected.getLastName()))
            .satisfies(a -> assertThat(a.getFirstName()).as("check firstName").isEqualTo(expected.getFirstName()))
            .satisfies(a -> assertThat(a.getIdentityType()).as("check identityType").isEqualTo(expected.getIdentityType()))
            .satisfies(a -> assertThat(a.getIdentityNumber()).as("check identityNumber").isEqualTo(expected.getIdentityNumber()))
            .satisfies(a ->
                assertThat(a.getIdentityEmissionDate()).as("check identityEmissionDate").isEqualTo(expected.getIdentityEmissionDate())
            )
            .satisfies(a -> assertThat(a.getBirthDate()).as("check birthDate").isEqualTo(expected.getBirthDate()))
            .satisfies(a -> assertThat(a.getBirthPlace()).as("check birthPlace").isEqualTo(expected.getBirthPlace()))
            .satisfies(a -> assertThat(a.getIdentityIssueDate()).as("check identityIssueDate").isEqualTo(expected.getIdentityIssueDate()))
            .satisfies(a ->
                assertThat(a.getIdentityPlaceOfIssue()).as("check identityPlaceOfIssue").isEqualTo(expected.getIdentityPlaceOfIssue())
            )
            .satisfies(a -> assertThat(a.getMaritalStatus()).as("check maritalStatus").isEqualTo(expected.getMaritalStatus()))
            .satisfies(a -> assertThat(a.getNbrOfchildren()).as("check nbrOfchildren").isEqualTo(expected.getNbrOfchildren()))
            .satisfies(a -> assertThat(a.getProfessionalEmail()).as("check professionalEmail").isEqualTo(expected.getProfessionalEmail()))
            .satisfies(a -> assertThat(a.getPersonalEmail()).as("check personalEmail").isEqualTo(expected.getPersonalEmail()))
            .satisfies(a -> assertThat(a.getPrimaryPhoneNumber()).as("check primaryPhoneNumber").isEqualTo(expected.getPrimaryPhoneNumber())
            )
            .satisfies(a ->
                assertThat(a.getSecondaryPhoneNumber()).as("check secondaryPhoneNumber").isEqualTo(expected.getSecondaryPhoneNumber())
            )
            .satisfies(a -> assertThat(a.getFaxNumber()).as("check faxNumber").isEqualTo(expected.getFaxNumber()))
            .satisfies(a -> assertThat(a.getNationality()).as("check nationality").isEqualTo(expected.getNationality()))
            .satisfies(a -> assertThat(a.getGender()).as("check gender").isEqualTo(expected.getGender()))
            .satisfies(a -> assertThat(a.getJobTitle()).as("check jobTitle").isEqualTo(expected.getJobTitle()))
            .satisfies(a -> assertThat(a.getProfessionalStatus()).as("check professionalStatus").isEqualTo(expected.getProfessionalStatus())
            )
            .satisfies(a -> assertThat(a.getBank()).as("check bank").isEqualTo(expected.getBank()))
            .satisfies(a -> assertThat(a.getAgency()).as("check agency").isEqualTo(expected.getAgency()))
            .satisfies(a -> assertThat(a.getRib()).as("check rib").isEqualTo(expected.getRib()))
            .satisfies(a ->
                assertThat(a.getDrivingLicenseNumber()).as("check drivingLicenseNumber").isEqualTo(expected.getDrivingLicenseNumber())
            )
            .satisfies(a ->
                assertThat(a.getDrivingLicenseIssueDate())
                    .as("check drivingLicenseIssueDate")
                    .isEqualTo(expected.getDrivingLicenseIssueDate())
            )
            .satisfies(a ->
                assertThat(a.getDrivingLicenseCategory()).as("check drivingLicenseCategory").isEqualTo(expected.getDrivingLicenseCategory())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientUpdatableRelationshipsEquals(Client expected, Client actual) {
        assertThat(actual)
            .as("Verify Client relationships")
            .satisfies(a -> assertThat(a.getClientAddress()).as("check clientAddress").isEqualTo(expected.getClientAddress()));
    }
}
