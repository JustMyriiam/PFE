package com.satoripop.insurance.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AgencyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyAllPropertiesEquals(Agency expected, Agency actual) {
        assertAgencyAutoGeneratedPropertiesEquals(expected, actual);
        assertAgencyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyAllUpdatablePropertiesEquals(Agency expected, Agency actual) {
        assertAgencyUpdatableFieldsEquals(expected, actual);
        assertAgencyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyAutoGeneratedPropertiesEquals(Agency expected, Agency actual) {
        assertThat(actual)
            .as("Verify Agency auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyUpdatableFieldsEquals(Agency expected, Agency actual) {
        assertThat(actual)
            .as("Verify Agency relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getRegion()).as("check region").isEqualTo(expected.getRegion()))
            .satisfies(a -> assertThat(a.getPhoneNumber()).as("check phoneNumber").isEqualTo(expected.getPhoneNumber()))
            .satisfies(a -> assertThat(a.getManagerName()).as("check managerName").isEqualTo(expected.getManagerName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyUpdatableRelationshipsEquals(Agency expected, Agency actual) {
        assertThat(actual)
            .as("Verify Agency relationships")
            .satisfies(a -> assertThat(a.getCity()).as("check city").isEqualTo(expected.getCity()));
    }
}
