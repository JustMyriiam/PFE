package com.satoripop.insurance.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VehicleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleAllPropertiesEquals(Vehicle expected, Vehicle actual) {
        assertVehicleAutoGeneratedPropertiesEquals(expected, actual);
        assertVehicleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleAllUpdatablePropertiesEquals(Vehicle expected, Vehicle actual) {
        assertVehicleUpdatableFieldsEquals(expected, actual);
        assertVehicleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleAutoGeneratedPropertiesEquals(Vehicle expected, Vehicle actual) {
        assertThat(actual)
            .as("Verify Vehicle auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleUpdatableFieldsEquals(Vehicle expected, Vehicle actual) {
        assertThat(actual)
            .as("Verify Vehicle relevant properties")
            .satisfies(a -> assertThat(a.getRegistrationNumber()).as("check registrationNumber").isEqualTo(expected.getRegistrationNumber())
            )
            .satisfies(a -> assertThat(a.getRegistrationType()).as("check registrationType").isEqualTo(expected.getRegistrationType()))
            .satisfies(a ->
                assertThat(a.getFirstRegistrationDate()).as("check firstRegistrationDate").isEqualTo(expected.getFirstRegistrationDate())
            )
            .satisfies(a ->
                assertThat(a.getTechnicalInspectionStatus())
                    .as("check technicalInspectionStatus")
                    .isEqualTo(expected.getTechnicalInspectionStatus())
            )
            .satisfies(a -> assertThat(a.getExpirationDate()).as("check expirationDate").isEqualTo(expected.getExpirationDate()))
            .satisfies(a -> assertThat(a.getNewValue()).as("check newValue").isEqualTo(expected.getNewValue()))
            .satisfies(a -> assertThat(a.getMarketValue()).as("check marketValue").isEqualTo(expected.getMarketValue()))
            .satisfies(a -> assertThat(a.getBrand()).as("check brand").isEqualTo(expected.getBrand()))
            .satisfies(a -> assertThat(a.getModel()).as("check model").isEqualTo(expected.getModel()))
            .satisfies(a -> assertThat(a.getFiscalPower()).as("check fiscalPower").isEqualTo(expected.getFiscalPower()))
            .satisfies(a -> assertThat(a.getChassisNumber()).as("check chassisNumber").isEqualTo(expected.getChassisNumber()))
            .satisfies(a -> assertThat(a.getEnergy()).as("check energy").isEqualTo(expected.getEnergy()))
            .satisfies(a -> assertThat(a.getGenre()).as("check genre").isEqualTo(expected.getGenre()))
            .satisfies(a -> assertThat(a.getNbrOfSeats()).as("check nbrOfSeats").isEqualTo(expected.getNbrOfSeats()))
            .satisfies(a ->
                assertThat(a.getNbrOfStandingPlaces()).as("check nbrOfStandingPlaces").isEqualTo(expected.getNbrOfStandingPlaces())
            )
            .satisfies(a -> assertThat(a.getEmptyWeight()).as("check emptyWeight").isEqualTo(expected.getEmptyWeight()))
            .satisfies(a -> assertThat(a.getPayload()).as("check payload").isEqualTo(expected.getPayload()))
            .satisfies(a -> assertThat(a.getBonusMalus()).as("check bonusMalus").isEqualTo(expected.getBonusMalus()))
            .satisfies(a -> assertThat(a.getVehicleAge()).as("check vehicleAge").isEqualTo(expected.getVehicleAge()))
            .satisfies(a -> assertThat(a.getMileage()).as("check mileage").isEqualTo(expected.getMileage()))
            .satisfies(a -> assertThat(a.getNumberOfDoors()).as("check numberOfDoors").isEqualTo(expected.getNumberOfDoors()))
            .satisfies(a -> assertThat(a.getGearbox()).as("check gearbox").isEqualTo(expected.getGearbox()))
            .satisfies(a -> assertThat(a.getColor()).as("check color").isEqualTo(expected.getColor()))
            .satisfies(a -> assertThat(a.getUsage()).as("check usage").isEqualTo(expected.getUsage()))
            .satisfies(a -> assertThat(a.getIsNew()).as("check isNew").isEqualTo(expected.getIsNew()))
            .satisfies(a -> assertThat(a.getHasGarage()).as("check hasGarage").isEqualTo(expected.getHasGarage()))
            .satisfies(a -> assertThat(a.getHasParking()).as("check hasParking").isEqualTo(expected.getHasParking()))
            .satisfies(a -> assertThat(a.getHasAlarmSystem()).as("check hasAlarmSystem").isEqualTo(expected.getHasAlarmSystem()))
            .satisfies(a -> assertThat(a.getHasSeatbeltAlarm()).as("check hasSeatbeltAlarm").isEqualTo(expected.getHasSeatbeltAlarm()))
            .satisfies(a -> assertThat(a.getHasRearCamera()).as("check hasRearCamera").isEqualTo(expected.getHasRearCamera()))
            .satisfies(a -> assertThat(a.getHasRearRadar()).as("check hasRearRadar").isEqualTo(expected.getHasRearRadar()))
            .satisfies(a -> assertThat(a.getHasAbsSystem()).as("check hasAbsSystem").isEqualTo(expected.getHasAbsSystem()))
            .satisfies(a -> assertThat(a.getHasGPS()).as("check hasGPS").isEqualTo(expected.getHasGPS()))
            .satisfies(a -> assertThat(a.getHasAirbag()).as("check hasAirbag").isEqualTo(expected.getHasAirbag()))
            .satisfies(a -> assertThat(a.getNavette()).as("check navette").isEqualTo(expected.getNavette()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleUpdatableRelationshipsEquals(Vehicle expected, Vehicle actual) {
        // empty method
    }
}
