package com.satoripop.insurance.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WarrantyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarrantyAllPropertiesEquals(Warranty expected, Warranty actual) {
        assertWarrantyAutoGeneratedPropertiesEquals(expected, actual);
        assertWarrantyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarrantyAllUpdatablePropertiesEquals(Warranty expected, Warranty actual) {
        assertWarrantyUpdatableFieldsEquals(expected, actual);
        assertWarrantyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarrantyAutoGeneratedPropertiesEquals(Warranty expected, Warranty actual) {
        assertThat(actual)
            .as("Verify Warranty auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarrantyUpdatableFieldsEquals(Warranty expected, Warranty actual) {
        assertThat(actual)
            .as("Verify Warranty relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getLimit()).as("check limit").isEqualTo(expected.getLimit()))
            .satisfies(a -> assertThat(a.getFranchise()).as("check franchise").isEqualTo(expected.getFranchise()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getMandatory()).as("check mandatory").isEqualTo(expected.getMandatory()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarrantyUpdatableRelationshipsEquals(Warranty expected, Warranty actual) {
        assertThat(actual)
            .as("Verify Warranty relationships")
            .satisfies(a -> assertThat(a.getInsurancePacks()).as("check insurancePacks").isEqualTo(expected.getInsurancePacks()));
    }
}
